package arrow

import (
	"github.com/influxdata/arrow/internal/bitutil"
	"github.com/influxdata/arrow/memory"
)

{{range .}}
{{if .Opt.BufferBuilder}}
type {{.Name}}BufferBuilder struct {
	bufferBuilder
}

func New{{.Name}}BufferBuilder(pool memory.Allocator) *{{.Name}}BufferBuilder {
	return &{{.Name}}BufferBuilder{bufferBuilder:bufferBuilder{pool:pool}}
}

// AppendValues appends the contents of v to the buffer, growing the buffer as needed.
func (b *{{.Name}}BufferBuilder) AppendValues(v []{{.Type}}) { b.Append({{.Name}}Traits{}.CastToBytes(v)) }

// Values returns a slice of length b.Len().
// The slice is only valid for use until the next buffer modification. That is, until the next call
// to Advance, Reset, Finish or any Append function. The slice aliases the buffer content at least until the next
// buffer modification.
func (b *{{.Name}}BufferBuilder) Values() []{{.Type}}           { return {{.Name}}Traits{}.CastFromBytes(b.Bytes()) }

// Value returns the {{.Type}} element at the index i. Value will panic if i is negative or â‰¥ Len.
func (b *{{.Name}}BufferBuilder) Value(i int) {{.Type}}         { return b.Values()[i] }

// Len returns the number of {{.Type}} elements in the buffer.
func (b *{{.Name}}BufferBuilder) Len() int                      { return b.length/{{.Name}}SizeBytes }

// AppendValue appends v to the buffer, growing the buffer as needed.
func (b *{{.Name}}BufferBuilder) AppendValue(v {{.Type}}) {
	if b.capacity < b.length+{{.Name}}SizeBytes {
		newCapacity := bitutil.NextPowerOf2(b.length + {{.Name}}SizeBytes)
		b.resize(newCapacity)
	}
	{{.Name}}Traits{}.PutValue(b.bytes[b.length:], v)
	b.length+={{.Name}}SizeBytes
}
{{end}}
{{end}}