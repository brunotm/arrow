package arrow

import "github.com/influxdata/arrow/memory"

// Numeric Array types
{{range .}}

type {{.Name}}BufferBuilder struct {
	bufferBuilder
}

func New{{.Name}}BufferBuilder(pool memory.Allocator) *{{.Name}}BufferBuilder {
	return &{{.Name}}BufferBuilder{bufferBuilder:bufferBuilder{pool:pool}}
}

func (b *{{.Name}}BufferBuilder) AppendValues(data []{{.Type}}) { b.Append({{.Name}}Traits{}.CastToBytes(data)) }
func (b *{{.Name}}BufferBuilder) Values() []{{.Type}}           { return {{.Name}}Traits{}.CastFromBytes(b.Bytes()) }
func (b *{{.Name}}BufferBuilder) Value(i int) {{.Type}}         { return b.Values()[i] }
func (b *{{.Name}}BufferBuilder) Len() int                      { return b.length/{{.Type}}SizeBytes }

func (b *{{.Name}}BufferBuilder) AppendValue(v {{.Type}}) {
	if b.capacity < b.length+{{.Type}}SizeBytes {
		newCapacity := nextPowerOf2(b.length + {{.Type}}SizeBytes)
		b.resize(newCapacity)
	}
	{{.Name}}Traits{}.PutValue(b.bytes[b.length:], v)
	b.length+={{.Type}}SizeBytes
}

{{end}}