{{$name := printf "%s_%s" .In.Type .D.arch}}
{{with .In}}
package math_test

import (
	"testing"

	"github.com/influxdata/arrow/array"
	"github.com/influxdata/arrow/math"
	"github.com/influxdata/arrow/memory"
	"github.com/stretchr/testify/assert"
)

func Test{{.Name}}Funcs_Sum(t *testing.T) {
	vec := makeArray{{.Name}}(10000)
	res := math.{{.Name}}.Sum(vec)
	assert.Equal(t, res, {{.Type}}(49995000))
}

func makeArray{{.Name}}(l int) *array.{{.Name}} {
	fb := array.New{{.Name}}Builder(memory.NewGoAllocator())
	fb.Reserve(l)
	for i := 0; i < l; i++ {
		fb.Append({{.Type}}(i))
	}
	return fb.Finish()
}

func benchmark{{.Name}}Funcs_Sum(b *testing.B, n int) {
	vec := makeArray{{.Name}}(n)
	b.SetBytes(int64(vec.Len() * 8))
	for i := 0; i < b.N; i++ {
		math.{{.Name}}.Sum(vec)
	}
}

func Benchmark{{.Name}}Funcs_Sum_256(b *testing.B) {
	benchmark{{.Name}}Funcs_Sum(b, 256)
}

func Benchmark{{.Name}}Funcs_Sum_1024(b *testing.B) {
	benchmark{{.Name}}Funcs_Sum(b, 1024)
}

func Benchmark{{.Name}}Funcs_Sum_8192(b *testing.B) {
	benchmark{{.Name}}Funcs_Sum(b, 8192)
}
{{end}}