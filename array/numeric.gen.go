// Code generated by array/numeric.gen.go.tmpl.
// DO NOT EDIT.

package array

import (
	"github.com/influxdata/arrow"
)

// A type which represents an immutable sequence of int32 values.
type Int32 struct {
	array
	values []int32
}

func NewInt32Data(data *Data) *Int32 {
	a := &Int32{}
	a.setData(data)
	return a
}

func (a *Int32) Int32Values() []int32 { return a.values }

func (a *Int32) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Int32Traits.CastFromBytes(vals.Bytes())
	}
}

// A type which represents an immutable sequence of int64 values.
type Int64 struct {
	array
	values []int64
}

func NewInt64Data(data *Data) *Int64 {
	a := &Int64{}
	a.setData(data)
	return a
}

func (a *Int64) Int64Values() []int64 { return a.values }

func (a *Int64) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Int64Traits.CastFromBytes(vals.Bytes())
	}
}

// A type which represents an immutable sequence of uint64 values.
type Uint64 struct {
	array
	values []uint64
}

func NewUint64Data(data *Data) *Uint64 {
	a := &Uint64{}
	a.setData(data)
	return a
}

func (a *Uint64) Uint64Values() []uint64 { return a.values }

func (a *Uint64) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Uint64Traits.CastFromBytes(vals.Bytes())
	}
}

// A type which represents an immutable sequence of float64 values.
type Float64 struct {
	array
	values []float64
}

func NewFloat64Data(data *Data) *Float64 {
	a := &Float64{}
	a.setData(data)
	return a
}

func (a *Float64) Float64Values() []float64 { return a.values }

func (a *Float64) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.Float64Traits.CastFromBytes(vals.Bytes())
	}
}

// A type which represents an immutable sequence of arrow.Timestamp values.
type Timestamp struct {
	array
	values []arrow.Timestamp
}

func NewTimestampData(data *Data) *Timestamp {
	a := &Timestamp{}
	a.setData(data)
	return a
}

func (a *Timestamp) TimestampValues() []arrow.Timestamp { return a.values }

func (a *Timestamp) setData(data *Data) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = arrow.TimestampTraits.CastFromBytes(vals.Bytes())
	}
}
