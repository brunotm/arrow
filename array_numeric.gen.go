// Generated by tmpl
// https://github.com/benbjohnson/tmpl
//
// DO NOT EDIT!
// Source: array_numeric.gen.go.tmpl

package arrow

import (
	"github.com/influxdata/arrow/memory"
)

// Numeric Array types

type Int64Array struct {
	data            *ArrayData
	nullBitmapBytes []byte
	values          []int64
}

func NewInt64Array(data *ArrayData) *Int64Array {
	a := &Int64Array{}
	a.setData(data)
	return a
}

func (a *Int64Array) DataType() DataType      { return a.data.typE }
func (a *Int64Array) NullN() int              { return a.data.nullN }
func (a *Int64Array) NullBitmapBytes() []byte { return a.nullBitmapBytes }
func (a *Int64Array) Int64Values() []int64    { return a.values }
func (a *Int64Array) Data() *ArrayData        { return a.data }
func (a *Int64Array) Len() int                { return a.data.length }
func (a *Int64Array) Values() *memory.Buffer  { return a.data.buffers[1] }

// IsNull returns true if value at index is null. Does not check bounds.
func (a *Int64Array) IsNull(i int) bool {
	return len(a.nullBitmapBytes) != 0 && bitIsNotSet(a.nullBitmapBytes, i)
}

// IsValid returns true if value at index is not null. Does not check bounds.
func (a *Int64Array) IsValid(i int) bool {
	return len(a.nullBitmapBytes) == 0 || bitIsSet(a.nullBitmapBytes, i)
}

func (a *Int64Array) arraySetData(data *ArrayData) {
	if len(data.buffers) > 0 && data.buffers[0] != nil {
		a.nullBitmapBytes = data.buffers[0].Bytes()
	}
	a.data = data
}

func (a *Int64Array) setData(data *ArrayData) {
	a.arraySetData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = Int64Traits{}.CastFromBytes(vals.Bytes())
	}
}

type Uint64Array struct {
	data            *ArrayData
	nullBitmapBytes []byte
	values          []uint64
}

func NewUint64Array(data *ArrayData) *Uint64Array {
	a := &Uint64Array{}
	a.setData(data)
	return a
}

func (a *Uint64Array) DataType() DataType      { return a.data.typE }
func (a *Uint64Array) NullN() int              { return a.data.nullN }
func (a *Uint64Array) NullBitmapBytes() []byte { return a.nullBitmapBytes }
func (a *Uint64Array) Uint64Values() []uint64  { return a.values }
func (a *Uint64Array) Data() *ArrayData        { return a.data }
func (a *Uint64Array) Len() int                { return a.data.length }
func (a *Uint64Array) Values() *memory.Buffer  { return a.data.buffers[1] }

// IsNull returns true if value at index is null. Does not check bounds.
func (a *Uint64Array) IsNull(i int) bool {
	return len(a.nullBitmapBytes) != 0 && bitIsNotSet(a.nullBitmapBytes, i)
}

// IsValid returns true if value at index is not null. Does not check bounds.
func (a *Uint64Array) IsValid(i int) bool {
	return len(a.nullBitmapBytes) == 0 || bitIsSet(a.nullBitmapBytes, i)
}

func (a *Uint64Array) arraySetData(data *ArrayData) {
	if len(data.buffers) > 0 && data.buffers[0] != nil {
		a.nullBitmapBytes = data.buffers[0].Bytes()
	}
	a.data = data
}

func (a *Uint64Array) setData(data *ArrayData) {
	a.arraySetData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = Uint64Traits{}.CastFromBytes(vals.Bytes())
	}
}

type Float64Array struct {
	data            *ArrayData
	nullBitmapBytes []byte
	values          []float64
}

func NewFloat64Array(data *ArrayData) *Float64Array {
	a := &Float64Array{}
	a.setData(data)
	return a
}

func (a *Float64Array) DataType() DataType       { return a.data.typE }
func (a *Float64Array) NullN() int               { return a.data.nullN }
func (a *Float64Array) NullBitmapBytes() []byte  { return a.nullBitmapBytes }
func (a *Float64Array) Float64Values() []float64 { return a.values }
func (a *Float64Array) Data() *ArrayData         { return a.data }
func (a *Float64Array) Len() int                 { return a.data.length }
func (a *Float64Array) Values() *memory.Buffer   { return a.data.buffers[1] }

// IsNull returns true if value at index is null. Does not check bounds.
func (a *Float64Array) IsNull(i int) bool {
	return len(a.nullBitmapBytes) != 0 && bitIsNotSet(a.nullBitmapBytes, i)
}

// IsValid returns true if value at index is not null. Does not check bounds.
func (a *Float64Array) IsValid(i int) bool {
	return len(a.nullBitmapBytes) == 0 || bitIsSet(a.nullBitmapBytes, i)
}

func (a *Float64Array) arraySetData(data *ArrayData) {
	if len(data.buffers) > 0 && data.buffers[0] != nil {
		a.nullBitmapBytes = data.buffers[0].Bytes()
	}
	a.data = data
}

func (a *Float64Array) setData(data *ArrayData) {
	a.arraySetData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = Float64Traits{}.CastFromBytes(vals.Bytes())
	}
}
