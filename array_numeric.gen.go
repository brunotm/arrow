// Code generated by array_numeric.gen.go.tmpl.
// DO NOT EDIT.

package arrow

// Numeric Array types

// Int32Array represents an immutable sequence of int32 values.
type Int32Array struct {
	array
	values []int32
}

func NewInt32Array(data *ArrayData) *Int32Array {
	a := &Int32Array{}
	a.setData(data)
	return a
}

func (a *Int32Array) Int32Values() []int32 { return a.values }

func (a *Int32Array) setData(data *ArrayData) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = Int32Traits{}.CastFromBytes(vals.Bytes())
	}
}

// Int64Array represents an immutable sequence of int64 values.
type Int64Array struct {
	array
	values []int64
}

func NewInt64Array(data *ArrayData) *Int64Array {
	a := &Int64Array{}
	a.setData(data)
	return a
}

func (a *Int64Array) Int64Values() []int64 { return a.values }

func (a *Int64Array) setData(data *ArrayData) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = Int64Traits{}.CastFromBytes(vals.Bytes())
	}
}

// Uint64Array represents an immutable sequence of uint64 values.
type Uint64Array struct {
	array
	values []uint64
}

func NewUint64Array(data *ArrayData) *Uint64Array {
	a := &Uint64Array{}
	a.setData(data)
	return a
}

func (a *Uint64Array) Uint64Values() []uint64 { return a.values }

func (a *Uint64Array) setData(data *ArrayData) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = Uint64Traits{}.CastFromBytes(vals.Bytes())
	}
}

// Float64Array represents an immutable sequence of float64 values.
type Float64Array struct {
	array
	values []float64
}

func NewFloat64Array(data *ArrayData) *Float64Array {
	a := &Float64Array{}
	a.setData(data)
	return a
}

func (a *Float64Array) Float64Values() []float64 { return a.values }

func (a *Float64Array) setData(data *ArrayData) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = Float64Traits{}.CastFromBytes(vals.Bytes())
	}
}

// TimestampArray represents an immutable sequence of Timestamp values.
type TimestampArray struct {
	array
	values []Timestamp
}

func NewTimestampArray(data *ArrayData) *TimestampArray {
	a := &TimestampArray{}
	a.setData(data)
	return a
}

func (a *TimestampArray) TimestampValues() []Timestamp { return a.values }

func (a *TimestampArray) setData(data *ArrayData) {
	a.array.setData(data)
	vals := data.buffers[1]
	if vals != nil {
		a.values = TimestampTraits{}.CastFromBytes(vals.Bytes())
	}
}
